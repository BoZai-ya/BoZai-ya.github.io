<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谈一谈vue中的filter过滤器，computed计算属性，watch侦听器</title>
      <link href="/2021/07/01/%E8%B0%88%E4%B8%80%E8%B0%88vue%E4%B8%AD%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%8Ccomputed%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%EF%BC%8Cwatch%E4%BE%A6%E5%90%AC%E5%99%A8/"/>
      <url>/2021/07/01/%E8%B0%88%E4%B8%80%E8%B0%88vue%E4%B8%AD%E7%9A%84filter%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%8Ccomputed%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%EF%BC%8Cwatch%E4%BE%A6%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天做项目的过程中遇到了一个需求，就是需要对价格进行格式处理。这种需求使用filter过滤器肯定是可以的。然后我就联想到了计算属性与就侦听器。今天简单对他们进以下介绍吧！</p>![冲浪]("./01.gif")<h3 id="那我就先来介绍一下filter吧！"><a href="#那我就先来介绍一下filter吧！" class="headerlink" title="那我就先来介绍一下filter吧！"></a>那我就先来介绍一下filter吧！</h3><p>首先我们要先了解的是<strong>它的实质</strong>是什么？<font color=red>（本质修饰作用）</font><br>以我自己的理解就是不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理。<strong>主要用于对数据格式进行转换。</strong><br>实质了解完，正好解决一下我遇到的那个问题。介绍一下它的用法<br>要知道过滤器分为两种<strong>全局过滤器和局部过滤器</strong><br>为了满足我的需求，两种过滤器的写法我都展示在下面：需求是将价格前面加上 ￥ 以及保留两位小数</p><h4 id="先是局部过滤器："><a href="#先是局部过滤器：" class="headerlink" title="先是局部过滤器："></a>先是局部过滤器：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//局部过滤器  </span><br><span class="line">​&lt;div&gt;价格：&#123;&#123;price | showPrice&#125;&#125;&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"> let vm = new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        price:200</span><br><span class="line">    &#125;,</span><br><span class="line">    filters:&#123;</span><br><span class="line">        //处理函数</span><br><span class="line">        showPrice(value)&#123;</span><br><span class="line">            console.log(value)    // ￥200.00</span><br><span class="line">            return &#x27;￥&#x27; + price.toFixed(2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>局部过滤器的用法：<br>在实例中定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter:&#123;</span><br><span class="line">过滤器名:function（value，其他参数(可传可不传)）&#123;</span><br><span class="line">    // 对value进行处理，然后return返回处理后的结果</span><br><span class="line">    return ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;price | showPrice&#125;&#125; // 把price当做showPrice的value参数进行处理，return返回处理的结果</span><br></pre></td></tr></table></figure><h4 id="然后是全局过滤器"><a href="#然后是全局过滤器" class="headerlink" title="然后是全局过滤器"></a>然后是全局过滤器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;price | showPrice&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.filter(&quot;showPrice&quot;,(value)=&gt;&#123;</span><br><span class="line">        return &#x27;￥&#x27; + price.toFixed(2)</span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">    let vm = new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            price:200 </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>全局过滤器的用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 全局过滤器  项目中一般写在main.js中</span><br><span class="line">vue.filter(过滤器名，function（value）&#123;</span><br><span class="line">return ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局过滤器的第一个参数是过滤器名称，第二个参数是处理函数，处理函数的第一个参数就是管道符的左边内容…</p><blockquote><p><strong><font color=red>注意点：</font></strong><br>局部过滤器 是filters 全局是filter (虽然全局加上s，不会报错但是该过滤器不会执行。）<br>当全局过滤器和局部过滤器重名时，会采用局部过滤器。<br>在 vue2 中默认不能使用过滤器，需要使用 <code>v-html=&quot;$options.filters.过滤器名&quot;</code><br>一个表达式可以使用多个过滤器。过滤器之间需要用管道符“|”隔开。其执行顺序从左往右</p></blockquote><p>对于<b>过滤器的用法</b>也有两种 一种是<b>双花括号插值</b>，一种是<b> v-bind 表达式</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在双花括号中 --&gt;</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 在 `v-bind` 中 --&gt;</span><br><span class="line">&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>还有就是关于<b>过滤器的传参</b>问题了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;message | filterA&#125;&#125;</span><br><span class="line">// 上面这种写法右边是过滤器函数 左边内容时传给右面函数的第一个参数</span><br><span class="line"> </span><br><span class="line">&#123;&#123;message | filterA | filterB&#125;&#125;</span><br><span class="line">//上述代码中,message是作为参数传给filterA函数，而filterA函数的返回值作为参数传给filterB函数，最后显示最终结果</span><br><span class="line"> </span><br><span class="line">&#123;&#123;message | filterA (&#x27;para1&#x27;,&#x27;para2&#x27;)&#125;&#125;</span><br><span class="line">//filterA函数的参数依次是 message ，para1，para2</span><br><span class="line"> </span><br><span class="line">&#123;&#123;&#x27;message1&#x27;,&#x27;message2&#x27; | filterA&#125;&#125;</span><br><span class="line">//上述代码中,filterA函数的参数依次是 message1 ， message2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上就是我对filter的一些总结。</p><h3 id="接下来就是计算属性咯"><a href="#接下来就是计算属性咯" class="headerlink" title="接下来就是计算属性咯"></a>接下来就是计算属性咯</h3><p>如果计算属性中依赖的数据项发生变化时，他会自动变化</p><p><b>它的使用场景：</b>在模板中可以直接通过插值语法简单的表达式显示一些data中的数据,但是有的时候如果我们放入太多的逻辑互让模板很难维护，对于复杂的逻辑，我们可以使用<b>计算属性</b></p><p>举一个简单的小例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;p&gt;计算属性：&#123;&#123; fullName &#125;&#125;&lt;/p&gt;   // 小 白</span><br><span class="line"> </span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      firstName: &quot;小&quot;,</span><br><span class="line">      lastName: &quot;白&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">computed: &#123;</span><br><span class="line">    fullName: &#123;</span><br><span class="line">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是它的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">计算属性名()&#123;</span><br><span class="line">//对依赖的数据进行处理</span><br><span class="line">return  //处理后的返回</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 视图中</span><br><span class="line">&#123;&#123;计算属性名&#125;&#125;</span><br></pre></td></tr></table></figure><p><b>另外一个就是计算属性的setter和getter方法了</b></p><ol><li>计算属性一般没有set方法 ，只读属性<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      firstName: &quot;小&quot;,</span><br><span class="line">      lastName: &quot;白&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">computed: &#123;</span><br><span class="line">    fullName: &#123;</span><br><span class="line">      //有setter方法时 必须要传递参数 （修改属性值时会用到此方法，但是确实很少用）</span><br><span class="line">      set: function (newValue) &#123;</span><br><span class="line">        console.log(newValue);</span><br><span class="line">      &#125;,</span><br><span class="line">      get: function () &#123;</span><br><span class="line">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><b>计算属性是在原来数据的基础上加工计算出新数据，并且他<font color=red>具有缓存，可以提高渲染能力</font></b></li></ol><h3 id="最后就是侦听器watch"><a href="#最后就是侦听器watch" class="headerlink" title="最后就是侦听器watch"></a>最后就是侦听器watch</h3><p><b>watch和计算属性computed有些相似，但是计算属性中必须有return返回值，而侦听器是函数处理，返回值是没有意义的</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">watch: &#123;</span><br><span class="line">属性名：function（）&#123;  // 侦听的是data中的数据项，数据项一旦变化，调用函数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天博文总结内容就先到这里。接下来我会分享更多自己的学习心得与总结！如果对于哪里你有不同的见解，欢迎指正！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/06/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/06/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我使用hexo框架搭建的第一篇自己的博客，加油吖，不断更新与美化。"><a href="#这是我使用hexo框架搭建的第一篇自己的博客，加油吖，不断更新与美化。" class="headerlink" title="这是我使用hexo框架搭建的第一篇自己的博客，加油吖，不断更新与美化。"></a>这是我使用hexo框架搭建的第一篇自己的博客，加油吖，不断更新与美化。</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/30/hello-world/"/>
      <url>/2021/06/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
