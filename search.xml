<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react生命周期</title>
      <link href="/2021/071224037.html"/>
      <url>/2021/071224037.html</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h2><p>  &nbsp;&nbsp;&nbsp;来啦来啦,今天在学习react的生命周期，那我就来总结一下吧！！</p><p><img src="01.gif" alt="冲浪"></p><p>首先我们先了解一下旧版本的生命周期</p><h2 id="旧"><a href="#旧" class="headerlink" title="旧"></a>旧</h2><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段:"></a>初始化阶段:</h3><blockquote><p>由ReactDOM.render()触发—初次渲染</p></blockquote><ul><li>constructor()</li><li>componentlWillMount()</li><li>render()</li><li>componentDidMount( ) =====&gt;常用<br><font color=red>在这个钩子中做一些初始化的事，例如:开启定时器、发送网络请求、订阅消息</font><h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段:"></a>更新阶段:</h3><blockquote><p>由组件内部this.setState()或父组件render触发</p></blockquote></li><li>shouldComponentUpdate()</li><li>componentWillUpdate()</li><li>render() =====&gt;必须使用的一个</li><li>componentDidUpdate()<h3 id="卸载组件"><a href="#卸载组件" class="headerlink" title="卸载组件:"></a>卸载组件:</h3><blockquote><p>由ReactDOM. unmountComponentAtNode()触发</p></blockquote></li><li>componentWillUnmount()=====&gt;常用<br><font color=red>在这个钩子中做一些收尾的事，例如:关闭定时器、取消订阅消息</font>   </li></ul><h2 id="新"><a href="#新" class="headerlink" title="新"></a>新</h2><h3 id="初始化阶段-1"><a href="#初始化阶段-1" class="headerlink" title="初始化阶段:"></a>初始化阶段:</h3><blockquote><p>由ReactDOM.render()触发—初次渲染</p></blockquote><ul><li>constructor()</li><li>getDeriledstateFromProps</li><li>render()</li><li>componentDidMount()</li></ul><h3 id="更新阶段-1"><a href="#更新阶段-1" class="headerlink" title="更新阶段:"></a>更新阶段:</h3><blockquote><p>由组件内部this.setState()或父组件重新render触发</p></blockquote><ul><li> getDerivedStateFromProps</li><li> shouldComponentUpdate()  </li><li> render()</li><li> getSnapshotBeforeUpdate</li><li> componentDidUpdate()</li></ul><h3 id="卸载组件-1"><a href="#卸载组件-1" class="headerlink" title="卸载组件:"></a>卸载组件:</h3><blockquote><p>由ReactDOM.unmountComponentAtNode()触发</p></blockquote><ul><li> componentWillUnmount()</li></ul><h3 id="重要的钩子"><a href="#重要的钩子" class="headerlink" title="重要的钩子"></a>重要的钩子</h3><ul><li>render()   <font color=red>初始化渲染或更新渲染调用</font> </li><li>componentDidMount()  <font color=red>开启监听，发送ajax请求</font> </li><li>componentWillUnmount()  <font color=red>做一些收尾工作  如：清理定时器</font> </li></ul><h3 id="即将废弃的钩子"><a href="#即将废弃的钩子" class="headerlink" title="即将废弃的钩子"></a>即将废弃的钩子</h3><ul><li>componentWillMounte</li><li>componentWillReceivePropse</li><li>componentWillUpdate<br>现在使用以上三个会出现警告，下一个大版本需要机上<b>UNSAFE_</b>前缀才能使用，以后可能会被彻底废弃，不建议使用。</li></ul><p>以上就是我对react生命周期的一些总结。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈一谈vue中的filter过滤器，computed计算属性，watch侦听器</title>
      <link href="/2021/070150893.html"/>
      <url>/2021/070150893.html</url>
      
        <content type="html"><![CDATA[<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天做项目的过程中遇到了一个需求，就是需要对价格进行格式处理。这种需求使用filter过滤器肯定是可以的。然后我就联想到了计算属性与就侦听器。今天简单对他们进以下介绍吧！</p><p><img src="01.gif" alt="冲浪"></p><h3 id="那我就先来介绍一下filter吧！"><a href="#那我就先来介绍一下filter吧！" class="headerlink" title="那我就先来介绍一下filter吧！"></a>那我就先来介绍一下filter吧！</h3><p>首先我们要先了解的是<strong>它的实质</strong>是什么？<font color=red>（本质修饰作用）</font><br>以我自己的理解就是不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理。<strong>主要用于对数据格式进行转换。</strong><br>实质了解完，正好解决一下我遇到的那个问题。介绍一下它的用法<br>要知道过滤器分为两种<strong>全局过滤器和局部过滤器</strong><br>为了满足我的需求，两种过滤器的写法我都展示在下面：需求是将价格前面加上 ￥ 以及保留两位小数</p><h4 id="先是局部过滤器："><a href="#先是局部过滤器：" class="headerlink" title="先是局部过滤器："></a>先是局部过滤器：</h4><pre><code>//局部过滤器  ​&lt;div&gt;价格：&#123;&#123;price | showPrice&#125;&#125;&lt;/div&gt; &lt;script&gt; let vm = new Vue(&#123;    el:&quot;#app&quot;,    data:&#123;        price:200    &#125;,    filters:&#123;        //处理函数        showPrice(value)&#123;            console.log(value)    // ￥200.00            return &#39;￥&#39; + price.toFixed(2)        &#125;    &#125; &#125;)&lt;/script&gt;</code></pre><p>局部过滤器的用法：<br>在实例中定义：</p><pre><code>filter:&#123;过滤器名:function（value，其他参数(可传可不传)）&#123;    // 对value进行处理，然后return返回处理后的结果    return ...&#125;</code></pre><p>使用时：</p><pre><code>&#123;&#123;price | showPrice&#125;&#125; // 把price当做showPrice的value参数进行处理，return返回处理的结果</code></pre><h4 id="然后是全局过滤器"><a href="#然后是全局过滤器" class="headerlink" title="然后是全局过滤器"></a>然后是全局过滤器</h4><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;h3&gt;&#123;&#123;price | showPrice&#125;&#125;&lt;/h3&gt;&lt;/div&gt; &lt;script&gt;    Vue.filter(&quot;showPrice&quot;,(value)=&gt;&#123;        return &#39;￥&#39; + price.toFixed(2)    &#125;)     let vm = new Vue(&#123;        el:&quot;#app&quot;,        data:&#123;            price:200         &#125;    &#125;) &lt;/script&gt;</code></pre><p>全局过滤器的用法：</p><pre><code>// 全局过滤器  项目中一般写在main.js中vue.filter(过滤器名，function（value）&#123;    return ...&#125;)</code></pre><p>全局过滤器的第一个参数是过滤器名称，第二个参数是处理函数，处理函数的第一个参数就是管道符的左边内容…</p><blockquote><p><strong><font color=red>注意点：</font></strong><br>局部过滤器 是filters 全局是filter (虽然全局加上s，不会报错但是该过滤器不会执行。）<br>当全局过滤器和局部过滤器重名时，会采用局部过滤器。<br>在 vue2 中默认不能使用过滤器，需要使用 <code>v-html=&quot;$options.filters.过滤器名&quot;</code><br>一个表达式可以使用多个过滤器。过滤器之间需要用管道符“|”隔开。其执行顺序从左往右</p></blockquote><p>对于<b>过滤器的用法</b>也有两种 一种是<b>双花括号插值</b>，一种是<b> v-bind 表达式</b></p><pre><code>&lt;!-- 在双花括号中 --&gt;&#123;&#123; message | capitalize &#125;&#125; &lt;!-- 在 `v-bind` 中 --&gt;&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</code></pre><p>还有就是关于<b>过滤器的传参</b>问题了。</p><pre><code>&#123;&#123;message | filterA&#125;&#125;// 上面这种写法右边是过滤器函数 左边内容时传给右面函数的第一个参数 &#123;&#123;message | filterA | filterB&#125;&#125;//上述代码中,message是作为参数传给filterA函数，而filterA函数的返回值作为参数传给filterB函数，最后显示最终结果 &#123;&#123;message | filterA ('para1','para2')&#125;&#125;//filterA函数的参数依次是 message ，para1，para2 &#123;&#123;'message1','message2' | filterA&#125;&#125;//上述代码中,filterA函数的参数依次是 message1 ， message2</code></pre><p>以上就是我对filter的一些总结。</p><h3 id="接下来就是计算属性咯"><a href="#接下来就是计算属性咯" class="headerlink" title="接下来就是计算属性咯"></a>接下来就是计算属性咯</h3><p>如果计算属性中依赖的数据项发生变化时，他会自动变化</p><p><b>它的使用场景：</b>在模板中可以直接通过插值语法简单的表达式显示一些data中的数据,但是有的时候如果我们放入太多的逻辑互让模板很难维护，对于复杂的逻辑，我们可以使用<b>计算属性</b></p><p>举一个简单的小例子</p><pre><code>&lt;p&gt;计算属性：&#123;&#123; fullName &#125;&#125;&lt;/p&gt;   // 小 白 data() &#123;    return &#123;      firstName: &quot;小&quot;,      lastName: &quot;白&quot;,    &#125;;  &#125;, computed: &#123;    fullName: &#123;        return this.firstName + &quot; &quot; + this.lastName;    &#125;,</code></pre><p>下面是它的用法</p><pre><code>computed: &#123;    计算属性名()&#123;        //对依赖的数据进行处理        return  //处理后的返回    &#125;&#125;// 视图中&#123;&#123;计算属性名&#125;&#125;</code></pre><p><b>另外一个就是计算属性的setter和getter方法了</b></p><ol><li>计算属性一般没有set方法 ，只读属性<br>```</li></ol><p>data() {<br>    return {<br>      firstName: “小”,<br>      lastName: “白”,<br>    };<br>  },</p><p>computed: {<br>    fullName: {<br>      //有setter方法时 必须要传递参数 （修改属性值时会用到此方法，但是确实很少用）<br>      set: function (newValue) {<br>        console.log(newValue);<br>      },<br>      get: function () {<br>        return this.firstName + “ “ + this.lastName;<br>      },<br>    },<br>  }</p><pre><code>  2. &lt;b&gt;计算属性是在原来数据的基础上加工计算出新数据，并且他&lt;font color=red&gt;具有缓存，可以提高渲染能力&lt;/font&gt;&lt;/b&gt;### 最后就是侦听器watch&lt;b&gt;watch和计算属性computed有些相似，但是计算属性中必须有return返回值，而侦听器是函数处理，返回值是没有意义的&lt;/b&gt;</code></pre><p>watch: {<br>    属性名：function（）{  // 侦听的是data中的数据项，数据项一旦变化，调用函数<br>    }<br>}</p><p>```<br>今天博文总结内容就先到这里。接下来我会分享更多自己的学习心得与总结！如果对于哪里你有不同的见解，欢迎指正！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/063063785.html"/>
      <url>/2021/063063785.html</url>
      
        <content type="html"><![CDATA[<h2 id="这是我使用hexo框架搭建的第一篇自己的博客，加油吖，不断更新与美化。"><a href="#这是我使用hexo框架搭建的第一篇自己的博客，加油吖，不断更新与美化。" class="headerlink" title="这是我使用hexo框架搭建的第一篇自己的博客，加油吖，不断更新与美化。"></a>这是我使用hexo框架搭建的第一篇自己的博客，加油吖，不断更新与美化。</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/063016107.html"/>
      <url>/2021/063016107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
